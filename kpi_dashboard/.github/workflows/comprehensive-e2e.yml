name: Comprehensive E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 매일 새벽 2시에 실행 (UTC 기준)
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - comprehensive
        - auxiliary
        - ci-only
        - stable

jobs:
  e2e-comprehensive:
    timeout-minutes: 45
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, webkit, firefox]
        test-suite: 
          - comprehensive-workflow
          - auxiliary-features
          - stable-workflow
        exclude:
          # Firefox에서는 일부 테스트만 실행 (안정성 확보)
          - browser: firefox
            test-suite: auxiliary-features
    
    services:
      mongo:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: kpi_dashboard/frontend/package-lock.json

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: kpi_dashboard/backend/requirements.txt

    - name: Install Backend Dependencies
      run: |
        cd kpi_dashboard/backend
        pip install -r requirements.txt

    - name: Install Frontend Dependencies
      run: |
        cd kpi_dashboard/frontend
        npm ci

    - name: Install Playwright Browsers
      run: |
        cd kpi_dashboard/frontend
        npx playwright install --with-deps ${{ matrix.browser }}

    - name: Setup Test Environment
      run: |
        # 테스트용 환경 변수 설정
        echo "MONGO_URL=mongodb://localhost:27017" >> $GITHUB_ENV
        echo "MONGO_DB_NAME=kpi_test_${{ github.run_id }}" >> $GITHUB_ENV
        echo "LOG_LEVEL=INFO" >> $GITHUB_ENV
        echo "CI=true" >> $GITHUB_ENV
        echo "BASE_URL=http://localhost:5173" >> $GITHUB_ENV

    - name: Initialize Test Database
      run: |
        # MongoDB 테스트 데이터 초기화
        cd kpi_dashboard/backend
        python -c "
        import asyncio
        from motor.motor_asyncio import AsyncIOMotorClient
        
        async def init_test_db():
            client = AsyncIOMotorClient('mongodb://localhost:27017')
            db = client['kpi_test_${{ github.run_id }}']
            
            # 테스트 데이터 삽입
            await db.analysis_results.insert_many([
                {
                    'analysis_date': '2025-08-09',
                    'ne_id': 'eNB_001',
                    'cell_id': 'Cell_001',
                    'analysis_results': {'availability': 99.5},
                    'status': 'completed'
                },
                {
                    'analysis_date': '2025-08-10',
                    'ne_id': 'eNB_002', 
                    'cell_id': 'Cell_002',
                    'analysis_results': {'rrc_success_rate': 98.2},
                    'status': 'completed'
                }
            ])
            
            print('Test database initialized')
        
        asyncio.run(init_test_db())
        "

    - name: Start Backend Server
      run: |
        cd kpi_dashboard/backend
        export MONGO_URL=mongodb://localhost:27017
        export MONGO_DB_NAME=kpi_test_${{ github.run_id }}
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        echo $! > backend.pid
        sleep 15
      env:
        MONGO_URL: mongodb://localhost:27017
        MONGO_DB_NAME: kpi_test_${{ github.run_id }}

    - name: Build and Start Frontend
      run: |
        cd kpi_dashboard/frontend
        npm run build
        npm run preview -- --port 5173 --host 0.0.0.0 &
        echo $! > frontend.pid
        sleep 10

    - name: Wait for Services to be Ready
      run: |
        echo "🔍 서비스 준비 상태 확인 중..."
        
        # Backend health check with retry
        for i in {1..30}; do
          if curl -f http://localhost:8000/api/master/info > /dev/null 2>&1; then
            echo "✅ Backend is ready! (attempt $i)"
            break
          else
            echo "⏳ Backend not ready yet... (attempt $i/30)"
            sleep 2
          fi
          if [ $i -eq 30 ]; then
            echo "❌ Backend failed to start"
            exit 1
          fi
        done
        
        # Frontend health check with retry
        for i in {1..20}; do
          if curl -f http://localhost:5173 > /dev/null 2>&1; then
            echo "✅ Frontend is ready! (attempt $i)"
            break
          else
            echo "⏳ Frontend not ready yet... (attempt $i/20)"
            sleep 2
          fi
          if [ $i -eq 20 ]; then
            echo "❌ Frontend failed to start"
            exit 1
          fi
        done

    - name: Verify API Endpoints
      run: |
        echo "🧪 API 엔드포인트 검증 중..."
        
        # Master APIs
        curl -s http://localhost:8000/api/master/info | jq .
        curl -s http://localhost:8000/api/master/pegs | jq '. | length'
        
        # Analysis APIs
        curl -s http://localhost:8000/api/analysis/results | jq '. | length'
        
        echo "✅ 모든 API 엔드포인트 정상 작동"

    - name: Run E2E Tests
      run: |
        cd kpi_dashboard/frontend
        
        # 테스트 스위트 결정
        if [ "${{ github.event.inputs.test_suite }}" = "comprehensive" ]; then
          TEST_FILES="comprehensive-workflow.spec.ts"
        elif [ "${{ github.event.inputs.test_suite }}" = "auxiliary" ]; then
          TEST_FILES="auxiliary-features.spec.ts"
        elif [ "${{ github.event.inputs.test_suite }}" = "stable" ]; then
          TEST_FILES="stable-workflow.spec.ts"
        elif [ "${{ github.event.inputs.test_suite }}" = "ci-only" ]; then
          TEST_FILES="ci-workflow.spec.ts"
        else
          # 기본적으로 matrix의 test-suite 사용
          TEST_FILES="${{ matrix.test-suite }}.spec.ts"
        fi
        
        echo "🎯 Running test suite: $TEST_FILES on ${{ matrix.browser }}"
        
        npx playwright test $TEST_FILES \
          --project=${{ matrix.browser }} \
          --reporter=html \
          --workers=1 \
          --timeout=120000 \
          --output-dir=test-results-${{ matrix.browser }}-${{ matrix.test-suite }}
      env:
        CI: true
        BASE_URL: http://localhost:5173
        BROWSER: ${{ matrix.browser }}
        TEST_SUITE: ${{ matrix.test-suite }}

    - name: Cleanup Test Database
      if: always()
      run: |
        # 테스트 완료 후 데이터베이스 정리
        python -c "
        import asyncio
        from motor.motor_asyncio import AsyncIOMotorClient
        
        async def cleanup_test_db():
            client = AsyncIOMotorClient('mongodb://localhost:27017')
            await client.drop_database('kpi_test_${{ github.run_id }}')
            print('Test database cleaned up')
        
        asyncio.run(cleanup_test_db())
        " || echo "Database cleanup failed (non-critical)"

    - name: Stop Services
      if: always()
      run: |
        # 백엔드 서버 종료
        if [ -f kpi_dashboard/backend/backend.pid ]; then
          kill $(cat kpi_dashboard/backend/backend.pid) || true
        fi
        
        # 프론트엔드 서버 종료
        if [ -f kpi_dashboard/frontend/frontend.pid ]; then
          kill $(cat kpi_dashboard/frontend/frontend.pid) || true
        fi
        
        # 포트를 사용하는 모든 프로세스 종료
        sudo lsof -ti:8000 | xargs -r sudo kill -9 || true
        sudo lsof -ti:5173 | xargs -r sudo kill -9 || true

    - name: Upload Playwright Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.browser }}-${{ matrix.test-suite }}
        path: kpi_dashboard/frontend/playwright-report/
        retention-days: 30

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.browser }}-${{ matrix.test-suite }}
        path: kpi_dashboard/frontend/test-results-*/
        retention-days: 30

    - name: Upload Screenshots on Failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: screenshots-${{ matrix.browser }}-${{ matrix.test-suite }}
        path: kpi_dashboard/frontend/test-results-*/
        retention-days: 7

  # 빠른 검증을 위한 CI 전용 테스트
  quick-validation:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    
    services:
      mongo:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: kpi_dashboard/frontend/package-lock.json

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Dependencies
      run: |
        cd kpi_dashboard/backend
        pip install -r requirements.txt
        cd ../frontend
        npm ci
        npx playwright install --with-deps chromium

    - name: Start Services
      run: |
        cd kpi_dashboard/backend
        export MONGO_URL=mongodb://localhost:27017
        export MONGO_DB_NAME=kpi_test_quick
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        
        cd ../frontend
        npm run build
        npm run preview -- --port 5173 &
        sleep 5

    - name: Quick Health Check
      run: |
        timeout 30 bash -c 'until curl -f http://localhost:8000/api/master/info; do sleep 2; done'
        timeout 30 bash -c 'until curl -f http://localhost:5173; do sleep 2; done'

    - name: Run Quick E2E Test
      run: |
        cd kpi_dashboard/frontend
        npx playwright test ci-workflow.spec.ts --project=chromium --workers=1 --timeout=60000
      env:
        CI: true
        BASE_URL: http://localhost:5173

  # 테스트 결과 요약
  test-summary:
    needs: [e2e-comprehensive, quick-validation]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download Test Artifacts
      uses: actions/download-artifact@v4
      with:
        path: test-artifacts/

    - name: Generate Test Summary
      run: |
        echo "# E2E Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Execution Overview" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Run ID**: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # 아티팩트 정보 요약
        echo "## Test Artifacts" >> $GITHUB_STEP_SUMMARY
        if [ -d "test-artifacts" ]; then
          echo "📊 Available test reports:" >> $GITHUB_STEP_SUMMARY
          find test-artifacts -name "playwright-report-*" -type d | while read dir; do
            browser_suite=$(basename "$dir" | sed 's/playwright-report-//')
            echo "- $browser_suite" >> $GITHUB_STEP_SUMMARY
          done
        else
          echo "No test artifacts found" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Status" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.e2e-comprehensive.result }}" == "success" ] && [ "${{ needs.quick-validation.result }}" == "success" ]; then
          echo "✅ All tests passed successfully!" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.quick-validation.result }}" == "success" ]; then
          echo "⚠️ Quick validation passed, but comprehensive tests had issues" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Tests failed - please check the detailed reports" >> $GITHUB_STEP_SUMMARY
        fi


