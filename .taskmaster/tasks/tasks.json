{
  "master": {
    "tasks": [
      {
        "id": 27,
        "title": "Backend: Implement Analysis Result API (In-Memory)",
        "description": "Create FastAPI endpoints to receive and serve analysis results from the MCP. For the MVP, data will be stored in-memory.",
        "details": "Implement POST /api/analysis-result, GET /api/analysis-result, GET /api/analysis-result/latest, and GET /api/analysis-result/{id}. Define the Pydantic model for the analysis result payload based on the PRD. Configure CORS for development.",
        "testStrategy": "Use an API client like Postman or Insomnia to send POST requests with sample JSON data and verify the GET endpoints return the correct data. Write unit tests for each endpoint.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 28,
        "title": "Backend: Implement KPI Query Proxy API",
        "description": "Create a proxy endpoint that receives DB connection details and a query, forwards it to the MCP or a DB connector, and returns the results.",
        "details": "Implement POST /api/kpi/query. The initial version can be a mock that returns sample statistical data. Implement basic error handling and timeout logic.",
        "testStrategy": "Test the endpoint by POSTing a JSON payload with mock DB settings and a query. Verify that it returns a correctly formatted response or a proper error message on failure.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 29,
        "title": "Backend: Extend Preference to Manage Derived PEGs",
        "description": "Update the existing Preference management system to support CRUD operations for derived PEG definitions.",
        "details": "Modify the configuration model to include a dictionary for `derived_pegs`. Update the existing Preference API endpoints to handle the creation, reading, updating, and deletion of these PEG definitions.",
        "testStrategy": "Use API client to test the CRUD endpoints for `derived_pegs`. Verify that definitions can be added, retrieved, updated, and deleted from the application's configuration.",
        "priority": "medium",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 30,
        "title": "MCP: Integrate with Backend Analysis API",
        "description": "Update the MCP script (`analysis_llm.py`) to send its analysis results to the new backend endpoint.",
        "details": "Modify the `post_results_to_backend()` function to target `POST /api/analysis-result`. Ensure the target URL is configurable via an environment variable or input parameter. The JSON payload must match the schema expected by the backend.",
        "testStrategy": "Run the MCP script and verify that a POST request is successfully sent to the backend. Check the backend logs or in-memory store to confirm the data was received correctly.",
        "priority": "high",
        "dependencies": [
          27
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 31,
        "title": "Frontend: Setup Common API Client",
        "description": "Create a centralized API client instance for making requests to the backend.",
        "details": "Create a file `src/lib/apiClient.js` that exports a configured `axios` instance. The base URL for the instance should be set using the `VITE_API_BASE_URL` environment variable.",
        "testStrategy": "Verify that the environment variable is correctly read and that the API client can make a simple test request to a backend health check endpoint.",
        "priority": "high",
        "dependencies": [
          27
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 32,
        "title": "Frontend: Develop Summary Report Page",
        "description": "Build the UI for the Summary Report page to display analysis results fetched from the backend.",
        "details": "Use the common API client to call `/api/analysis-result/latest` and `/api/analysis-result` to get data. Render the list of reports. Implement a detail view for a selected report, including the base64 chart image and a download link for the full report.",
        "testStrategy": "Manually test the UI by navigating to the Summary Report page. Verify that the list of reports loads correctly. Test selecting a report to view its details and downloading the associated file.",
        "priority": "high",
        "dependencies": [
          27,
          31
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 33,
        "title": "Frontend: Develop Statistics Page DB Configuration UI",
        "description": "Create the UI components on the Statistics page for users to input and manage database connection settings.",
        "details": "Add a collapsible section at the top of the Statistics page with input fields for DB Host, Port, User, Password, and DB Name. The state should be managed by React.",
        "testStrategy": "Manually verify the UI renders correctly. Check that the input fields are functional and that the collapsible section works as expected.",
        "priority": "medium",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 34,
        "title": "Frontend: Implement Statistics Page Query and Visualization",
        "description": "Connect the Statistics page UI to the backend to query for KPI data and visualize the results.",
        "details": "On form submission, send the DB settings and query parameters to the `/api/kpi/query` endpoint. Use the response data to render charts with Recharts and display master data in a table.",
        "testStrategy": "Enter mock DB settings, trigger a query, and verify that the request is sent to the backend. Ensure that mock data returned from the backend is correctly rendered as a chart and a table. Test error handling by simulating a failed API call.",
        "priority": "medium",
        "dependencies": [
          28,
          31,
          33
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 35,
        "title": "Frontend: Develop Preference Page for Derived PEGs",
        "description": "Add UI components to the Preference page to allow users to manage derived PEG definitions.",
        "details": "Create a new tab or section on the Preference page. Implement a form or JSON editor to allow users to create, view, edit, and delete derived PEG formulas. Connect these actions to the backend Preference API.",
        "testStrategy": "Manually test the full CRUD lifecycle. Add a new PEG definition, verify it appears in the list, edit it, and finally delete it. Confirm that each action successfully calls the backend API.",
        "priority": "low",
        "dependencies": [
          29,
          31
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 36,
        "title": "Enhancement: Implement DB Persistence for Analysis Results",
        "description": "Transition the backend from in-memory storage to a persistent database for analysis results.",
        "details": "Define a database schema for the analysis results using SQLAlchemy. Configure a connection to a PostgreSQL database. Modify the `/api/analysis-result` endpoints to perform CRUD operations on the database instead of the in-memory object.",
        "testStrategy": "After implementation, repeat the tests from task #27. Additionally, inspect the database directly to verify that data is being created, updated, and deleted correctly. Test application restarts to ensure data persists.",
        "priority": "medium",
        "dependencies": [
          27
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 37,
        "title": "Frontend: Implement Global Error Handling and Notifications",
        "description": "Implement a system for providing clear user feedback for API calls, especially for errors.",
        "details": "Integrate a toast notification library (e.g., react-toastify). Modify the common API client to intercept responses and display a success or error toast message, such as for a failed DB connection on the Statistics page.",
        "testStrategy": "Trigger a successful API call and verify a success notification appears. Trigger a failed API call (e.g., by stopping the backend) and verify a clear error message is displayed to the user.",
        "priority": "low",
        "dependencies": [
          31
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 38,
        "title": "Enhancement: Refine DB Query Proxy and Connection Management",
        "description": "Improve the reliability and security of the KPI query proxy.",
        "details": "Implement robust connection handling for external DBs, including connection pooling and retry logic. Ensure secure management of DB credentials passed from the frontend. Add structured logging for query attempts, successes, and failures.",
        "testStrategy": "Perform load testing on the `/api/kpi/query` endpoint. Test failure scenarios, such as incorrect credentials or a non-responsive database, to verify that the system handles them gracefully and logs appropriate errors.",
        "priority": "low",
        "dependencies": [
          28
        ],
        "status": "done",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-08-08T16:22:51.535Z",
      "updated": "2025-08-13T15:50:40.229Z",
      "description": "Tasks for master context"
    }
  }
}