{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Project Setup & Dependency Management",
        "description": "Initialize the project environment, set up version control, define core dependencies, and establish a consistent development workflow for the new features.",
        "details": "Create a new feature branch. Update `requirements.txt` or `pyproject.toml` to include necessary libraries such as `pymongo` for MongoDB interaction, `fastapi` or `flask` for API development, `pydantic` for data validation, and `langchain` or `llama_index` for LLM integration. Configure pre-commit hooks for code quality (e.g., Black, Flake8, isort). Set up a basic CI/CD pipeline for automated testing.",
        "testStrategy": "Verify all dependencies are correctly installed and the project runs without basic import errors. Execute a simple 'hello world' endpoint if an API framework is used to confirm basic functionality.",
        "priority": "high",
        "dependencies": [],
        "status": "in-progress",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Extend Database Schema for Host & Relationships",
        "description": "Modify the existing SQL database schema to include a `host` column in relevant tables and update the MongoDB payload structure to store `host_ids` and `primary_host` within `target_scope`.",
        "details": "For SQL, add a `host_id` (e.g., UUID or string) or `host_name` column to tables like `analysis_results` and `network_elements` where host information is relevant. For MongoDB, update the `analysis_results` collection schema to include `host_ids` (array of strings/ObjectIDs) and `primary_host` (string/ObjectID) within the `target_scope` field. Ensure backward compatibility where possible.",
        "testStrategy": "Create and execute database migration scripts. Insert sample data containing host information into both SQL and MongoDB, then query to confirm that the new host fields are correctly stored and retrievable.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "To Do",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Implement NE/Cell ID Validation & Existing Logic Refinement",
        "description": "Enhance existing NE ID and Cell ID validation logic, ensuring format adherence (e.g., 'nvgnb#10000' for NE) and verification against the database for existence and validity.",
        "details": "Refactor the validation logic in `analysis_llm.py` (or relevant module) into a dedicated validation utility. Implement regex-based format checks for NE and Cell IDs. Integrate database lookups to confirm that the provided NE and Cell IDs actually exist and are active within the network inventory. Improve error messages to be specific and actionable for invalid IDs.",
        "testStrategy": "Develop unit tests for `validate_ne_id` and `validate_cell_id` functions, covering valid, invalid format, and non-existent IDs. Conduct integration tests to ensure the validation correctly blocks API requests with invalid NE/Cell IDs.",
        "priority": "high",
        "dependencies": [
          1,
          2
        ],
        "status": "To Do",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Develop Host Filter Validation & Integration",
        "description": "Implement new validation logic for Host identifiers (IP address, hostname) including format validation, existence checks against the database, and initial integration into the filtering mechanism.",
        "details": "Create a `validate_host_id` function. Utilize Python's `ipaddress` module for robust IP address validation and regular expressions for hostname pattern matching. Query the network inventory database (SQL or MongoDB) to confirm the host's existence and operational status. Integrate this validation into the existing data filtering pipeline, specifically updating SQL WHERE conditions (e.g., `line 443-467`) to include host filtering.",
        "testStrategy": "Write unit tests for `validate_host_id` covering valid IPs, invalid IPs, valid hostnames, invalid hostnames, and non-existent hosts. Perform integration tests to confirm that host filtering works correctly with valid inputs and rejects invalid ones at the API level.",
        "priority": "high",
        "dependencies": [
          2,
          3
        ],
        "status": "To Do",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Implement Integrated NE-Cell-Host Relationship Validation",
        "description": "Develop the `validate_ne_cell_host_filters()` function to perform comprehensive validation of NE, Cell ID, and Host filters, including their inter-relationships and coverage analysis.",
        "details": "This function will orchestrate individual validations (from Tasks 3 & 4). It must verify that specified Cells are valid children of the given NEs, and that Hosts are logically/physically associated with the provided NEs/Cells. Implement database queries to establish and confirm these complex relationships. The function should return a structured result including individual target validation status, relationship mapping, coverage analysis, and any warnings or errors.",
        "testStrategy": "Create extensive unit tests for `validate_ne_cell_host_filters()` with various combinations: valid, partially valid, completely invalid, and inconsistent relationships (e.g., Cell not belonging to NE, Host not associated with specified NE/Cell). Test edge cases such as empty filters or a large number of filters.",
        "priority": "high",
        "dependencies": [
          3,
          4
        ],
        "status": "To Do",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Enhance Error Handling for Target Validation",
        "description": "Implement robust error handling mechanisms for target validation failures, including custom exceptions (`TargetValidationError`, `HostValidationError`) and a centralized handler (`handle_multi_target_validation_errors`).",
        "details": "Define custom exception classes (e.g., `TargetValidationError`, `HostValidationError`) inheriting from a base application exception. Modify validation functions (Tasks 3, 4, 5) to raise these specific exceptions upon failure. Implement a global exception handler (e.g., using FastAPI's `ExceptionHandler` or Flask's `errorhandler`) to catch these exceptions and return standardized, informative JSON error responses to the client, including details on which specific target failed validation.",
        "testStrategy": "Functional tests to trigger various validation errors (e.g., invalid NE format, non-existent Cell, unassociated Host). Verify that the API returns the correct HTTP status code (e.g., 400 Bad Request) and a well-structured, informative error message that clearly indicates the validation failure.",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "To Do",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Extend MongoDB Schema for Comprehensive Host Metadata",
        "description": "Further expand the MongoDB payload structure to include detailed Host metadata, such as `target_combinations` (NE-Cell-Host tuples), `filter_metadata` with Host coverage, and `relationship_coverage`.",
        "details": "Update the MongoDB schema definition (e.g., using Pydantic models for data validation before saving). Add `target_combinations` as an array of embedded documents (e.g., `[{'ne_id': '...', 'cell_id': '...', 'host_id': '...'}]`). Extend `filter_metadata` to include `host_coverage_info` (e.g., percentage of hosts covered). Add `relationship_coverage` to store the detailed results of the NE-Cell-Host association validation.",
        "testStrategy": "Develop unit tests for the updated MongoDB schema definition. Conduct integration tests to save analysis results with the extended payload and verify that all new fields are correctly populated, stored, and retrievable in MongoDB.",
        "priority": "medium",
        "dependencies": [
          2,
          5
        ],
        "status": "To Do",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Optimize MongoDB Indexing for Host-based Queries",
        "description": "Create and optimize MongoDB indexes to support efficient querying based on Host IDs, including compound indexes with NE/Cell IDs and array indexing for `target_combinations`.",
        "details": "Analyze anticipated query patterns for the new API endpoints (Task 10). Create compound indexes on fields like `(ne_id, cell_id, host_id)` or `(host_id, ne_id, cell_id)` to optimize multi-field searches. Implement array indexing on the `target_combinations` field to enable efficient lookups within the embedded documents. Use `db.collection.explain()` to verify index usage and query performance.",
        "testStrategy": "Perform performance tests using `db.collection.find().explain()` to confirm index utilization for various query types. Benchmark queries with and without the new indexes to demonstrate measurable performance improvements for host-based and multi-target searches.",
        "priority": "medium",
        "dependencies": [
          7
        ],
        "status": "To Do",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Enhance POST API Endpoint for Multi-Target Payload Validation",
        "description": "Improve the `/api/analysis/results/` POST endpoint to validate the structure and content of the incoming analysis result payload, specifically for multi-target (NE/Cell/Host) metadata and data consistency.",
        "details": "Integrate the `validate_ne_cell_host_filters()` function (from Task 5) into the POST endpoint's request processing pipeline. Utilize a data validation library like Pydantic to define and enforce the expected payload schema, ensuring all required fields (including new Host-related ones) are present and correctly typed. Add logic to verify consistency between the `ne/cellid/host` metadata provided and the actual `stats` data within the payload.",
        "testStrategy": "Conduct API integration tests by sending valid and various types of invalid payloads (e.g., missing required fields, incorrect data types, inconsistent metadata) to the POST endpoint. Verify correct data persistence for valid payloads and appropriate, informative error responses for invalid ones.",
        "priority": "medium",
        "dependencies": [
          5,
          7
        ],
        "status": "To Do",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Implement New Query API Endpoints for Host & Multi-Target Search",
        "description": "Develop new GET API endpoints to support flexible querying of analysis results by NE, Cell, and Host combinations, including host-specific performance summaries and retrieval of the latest results per combination.",
        "details": "Create new RESTful endpoints, such as `/api/analysis/results/by-target`, that accept query parameters for `ne_id`, `cell_id`, and `host_id`. Implement logic to construct efficient MongoDB queries leveraging the new indexes (Task 8). Add a dedicated endpoint for `host_performance_summary` that aggregates relevant host metrics. Ensure support for retrieving the 'latest' analysis result for a given target combination (NE+Cell+Host).",
        "testStrategy": "Perform comprehensive API integration tests for all new query endpoints. Test with single filters, multiple filters, and various combinations. Verify that the correct and complete data is returned and that query performance meets the specified SLA (e.g., < 800ms).",
        "priority": "medium",
        "dependencies": [
          8,
          9
        ],
        "status": "To Do",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Develop Host-Specific Prompt Templates & Context Integration",
        "description": "Create and integrate prompt templates for the LLM that are specifically tailored for analyzing data related to a particular NE, Cell, and Host combination, incorporating their unique characteristics.",
        "details": "Design dynamic prompt templates that inject specific contextual information about the target NE (e.g., location, capacity, frequency), Cell (e.g., sector, coverage, adjacent cells), and Host (e.g., hardware specifications, current load, connectivity status). Implement a data retrieval mechanism to gather this detailed metadata from the database before constructing the prompt. Utilize a templating engine (e.g., Jinja2) or an LLM framework's built-in prompt templating capabilities (e.g., LangChain's `PromptTemplate`).",
        "testStrategy": "Develop unit tests for prompt generation with various NE/Cell/Host inputs, verifying that the generated prompt includes all relevant contextual information. Conduct manual review of LLM outputs to assess the relevance and accuracy of the analysis based on the new, enriched prompts.",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "To Do",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Extend LLM Result Interpretation & Multi-Dimensional Analysis",
        "description": "Enhance the LLM's output structure and post-processing to include detailed Host performance analysis, integration analysis (NE-Cell synergy, Host infrastructure impact), and multi-dimensional ranking.",
        "details": "Define a new, expanded output schema for the LLM analysis results. This schema should include dedicated fields such as `host_performance` (e.g., resource utilization, infrastructure health, bottleneck analysis), `integration_analysis` (e.g., NE-Cell synergy insights, Host infrastructure impact on network performance), and `multi_dimensional_ranking` (e.g., individual scores for NE, Cell, Host, and a combined overall score). Implement post-processing logic to parse the LLM's raw text output into this structured JSON format and perform any necessary calculations for ranking or aggregation.",
        "testStrategy": "Perform integration tests where the LLM is invoked with the new prompts, and its output is then parsed. Verify that the structured output contains all expected Host-related analysis, integration insights, and ranking metrics. Conduct manual review of the quality and accuracy of the LLM's generated insights.",
        "priority": "medium",
        "dependencies": [
          11
        ],
        "status": "To Do",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-08-21T16:41:39.547Z",
      "updated": "2025-08-21T16:42:27.597Z",
      "description": "Tasks for master context"
    }
  }
}