# Task ID: 49
# Title: Frontend: Statistics 분석 결과 저장 및 Dashboard 연동
# Status: pending
# Dependencies: 45, 47
# Priority: medium
# Description: Statistics 탭에서 분석에 사용된 PEG를 체크박스로 선택하여 Preference에 저장하고, 이를 Dashboard에 즉시 반영하는 기능을 구현합니다.
# Details:
분석 결과 테이블의 각 PEG 행 옆에 체크박스를 추가합니다. 'Save to Dashboard' 버튼을 추가하고, 클릭 시 선택된 PEG 목록을 `PUT /api/preference/settings` API를 통해 업데이트합니다. 업데이트 성공 시 전역 상태를 갱신하여 Dashboard에 변경 사항이 반영되도록 합니다.

# Test Strategy:
체크박스 선택 및 저장 버튼 클릭 시 Preference 데이터가 올바르게 업데이트되는지 백엔드 로그 또는 DB에서 확인합니다. 저장 후 Dashboard로 이동했을 때 선택한 PEG가 표시되는지 검증합니다.

# Subtasks:
## 1. Statistics 결과 테이블에 체크박스 UI 추가 [pending]
### Dependencies: None
### Description: Statistics 분석 결과를 표시하는 테이블에 체크박스를 추가하여 사용자가 원하는 PEG를 선택할 수 있도록 합니다.
### Details:
Statistics 결과 테이블의 각 행에 체크박스를 추가하고, 선택된 항목들의 상태를 관리하는 로컬 상태를 구현합니다. 체크박스 선택 시 시각적 피드백을 제공합니다.

## 2. 선택된 항목들의 상태 관리 구현 [pending]
### Dependencies: None
### Description: 체크박스로 선택된 PEG 항목들의 상태를 관리하는 로직을 구현합니다.
### Details:
선택된 항목들을 배열로 관리하고, 체크박스 선택/해제 시 상태를 업데이트하는 함수를 구현합니다. 전체 선택/해제 기능도 포함합니다.

## 3. Dashboard 저장 버튼 및 API 호출 구현 [pending]
### Dependencies: None
### Description: 선택된 PEG를 Dashboard 설정에 저장하는 버튼과 API 호출 로직을 구현합니다.
### Details:
'Save to Dashboard' 버튼을 추가하고, 클릭 시 선택된 PEG 목록을 PUT /api/preference/settings API로 전송하는 로직을 구현합니다. 로딩 상태와 성공/실패 피드백을 포함합니다.

## 4. 전역 Preference 상태 업데이트 로직 구현 [pending]
### Dependencies: None
### Description: API 호출 성공 시 전역 Preference 상태를 올바르게 업데이트하는 로직을 구현합니다.
### Details:
API 호출이 성공하면 전역 상태(Zustand/Context)의 Dashboard 설정을 업데이트하여 선택된 PEG가 반영되도록 합니다. 상태 업데이트 후 성공 메시지를 표시합니다.

## 5. Dashboard 컴포넌트 자동 반영 검증 [pending]
### Dependencies: None
### Description: Preference 상태 변경이 Dashboard 컴포넌트에 자동으로 반영되는지 검증하고 필요한 조정을 수행합니다.
### Details:
Preference 상태 업데이트 후 Dashboard 컴포넌트가 자동으로 새로운 설정을 반영하는지 확인합니다. 필요시 Dashboard 컴포넌트의 상태 구독 로직을 조정합니다.

