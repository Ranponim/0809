# Task ID: 46
# Title: Backend: Statistics 비교 분석 API 구현
# Status: pending
# Dependencies: 39
# Priority: medium
# Description: 두 개의 날짜 구간에 대한 데이터를 비교 분석(평균, delta, RSD)하는 백엔드 로직과 API 엔드포인트를 개발합니다.
# Details:
FastAPI에서 `/api/statistics/compare` (POST) 엔드포인트를 구현합니다. 요청 본문으로 두 개의 날짜 구간과 분석 대상 PEG 목록을 받습니다. MongoDB에서 해당 기간의 데이터를 조회하고, Pandas 등의 라이브러리를 사용하여 평균, delta(차이), RSD(상대표준편차)를 계산하여 결과를 반환합니다.

# Test Strategy:
예상되는 결과를 미리 계산한 테스트 케이스를 사용하여 API의 계산 로직이 정확한지 검증합니다. 데이터가 없는 구간에 대한 예외 처리가 올바르게 동작하는지 확인합니다.

# Subtasks:
## 1. API 요청/응답 Pydantic 모델 정의 [pending]
### Dependencies: None
### Description: Statistics 비교 분석 API의 요청 및 응답 데이터 구조를 정의하는 Pydantic 모델을 생성합니다.
### Details:
POST /api/statistics/compare 엔드포인트의 요청 모델(날짜 구간 1, 2, 분석 대상 PEG 목록)과 응답 모델(평균값, delta, RSD 계산 결과)을 Pydantic으로 정의합니다.

## 2. MongoDB 집계 쿼리 구현 [pending]
### Dependencies: None
### Description: 두 날짜 구간의 데이터를 효율적으로 조회하기 위한 MongoDB 집계 쿼리를 구현합니다.
### Details:
MongoDB의 aggregation pipeline을 사용하여 지정된 날짜 구간과 PEG에 해당하는 데이터를 조회하는 쿼리를 작성합니다. 성능을 위해 적절한 인덱스를 생성합니다.

## 3. Pandas를 활용한 통계 분석 로직 구현 [pending]
### Dependencies: None
### Description: 조회된 데이터를 Pandas를 사용하여 평균값, delta, RSD를 계산하는 핵심 분석 로직을 구현합니다.
### Details:
Pandas DataFrame을 사용하여 두 구간의 데이터를 처리하고, 평균값, delta(차이), RSD(상대표준편차)를 계산하는 함수를 구현합니다. 예외 상황(데이터 없음, 0으로 나누기 등)을 처리합니다.

## 4. FastAPI 엔드포인트 통합 구현 [pending]
### Dependencies: None
### Description: 모든 구성 요소를 통합하여 완전한 FastAPI 엔드포인트를 구현합니다.
### Details:
Pydantic 모델, MongoDB 쿼리, Pandas 분석 로직을 통합하여 POST /api/statistics/compare 엔드포인트를 완성합니다. 에러 처리, 로깅, 응답 포맷팅을 포함합니다.

## 5. 통계 분석 로직 단위 테스트 작성 [pending]
### Dependencies: None
### Description: 통계 분석 로직의 정확성을 보장하기 위한 포괄적인 단위 테스트를 작성합니다.
### Details:
다양한 데이터 시나리오(정상 데이터, 빈 데이터, 극단값 등)에 대한 테스트 케이스를 작성하여 계산 로직의 정확성을 검증합니다. Mock 데이터를 사용하여 테스트를 수행합니다.

