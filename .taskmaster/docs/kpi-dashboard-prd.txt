<context>
# Overview
3GPP KPI 대시보드 고도화 프로젝트. FastAPI 백엔드, React/Vite 프론트엔드, LLM 기반 MCP 분석기(`analysis_llm.py`)를 연동한다.

목표:
- MCP가 생성한 종합 분석 결과(JSON/HTML)를 백엔드에 저장하고 프론트엔드 Summary Report에서 조회/시각화
- Statistics 화면에서 DB 연결정보(host/port/user/password/dbname, table, columns)를 사용자가 설정하여 백엔드→MCP→DB를 통해 실제 데이터를 검색
- Preference에서 파생 PEG 정의(peg_name 수식)를 CRUD로 관리하고, MCP 분석 시 반영

# Core Features
- 분석결과 수신/저장 API: MCP가 POST한 분석 JSON/HTML 메타를 저장, 조회 API 제공
- DB 설정 관리/프록시 API: 프론트에서 입력한 DB 설정으로 KPI 통계 쿼리 위임(MCP 또는 백엔드 직접 쿼리) 및 응답 반환
- Preference 확장: 파생 PEG 정의 CRUD(예: telus_RACH_Success = Random_access_preamble_count/Random_access_response*100)
- 프론트 공용 API 클라이언트와 환경변수 기반 BASE_URL(VITE_API_BASE_URL)
- Summary Report: 저장된 최신 분석결과 렌더 + 선택/다운로드
- Statistics: DB 설정 입력 + 검색, 차트/마스터 데이터 표시

# User Experience
- 좌측 메뉴: Dashboard, Summary Report, Statistics, Preference 유지
- Summary Report: 분석 목록/세부/다운로드. 업로드는 MCP가 백엔드에 POST하므로 UI는 조회 중심
- Statistics: 상단에 DB 설정 섹션(접기/펼치기). 저장된 설정으로 검색. 실패 시 명확한 에러 토스트
- Preference: 파생 PEG 정의 탭 추가(JSON 편집 허용)
</context>

<PRD>
# Technical Architecture
## Backend (FastAPI)
- POST /api/analysis-result: MCP가 분석 결과 업로드(JSON 본문: status, analysis, stats[], chart_overall_base64, report_path, n_minus_1, n 등). 서버는 초기엔 메모리 저장, 향후 DB 연동
- GET  /api/analysis-result/latest: 최신 분석결과 조회
- GET  /api/analysis-result/{id}: 단건 조회
- GET  /api/analysis-result: 목록 조회(페이지네이션 파라미터는 다음 스텝)
- POST /api/kpi/query: DB 설정과 질의를 받아 MCP 또는 백엔드가 프록시로 KPI 통계를 조회하여 반환(타임아웃/에러 로깅)
- Preference 확장: config 내에 derived_pegs(dict) 허용. 동일 CRUD 유지
- 운영 고려: CORS는 개발 단계 전체 허용, 운영 시 도메인 제한 및 인증 추가

## MCP (analysis_llm.py)
- 기존 post_results_to_backend()를 /api/analysis-result로 지정
- 입력: n_minus_1, n, db{host,port,user,password,dbname}, table, columns{time, peg_name, value, ne, cellid}, preference, selected_pegs, peg_definitions
- 출력: 백엔드/프론트에서 소비 가능한 JSON 계약 유지(analysis/stats/report_path 등)

## Frontend (React/Vite)
- env: VITE_API_BASE_URL
- 공용 axios 인스턴스(src/lib/apiClient.js)
- SummaryReport: /api/analysis-result 목록/최신/단건 조회 및 렌더
- Statistics: DB 설정 UI + /api/kpi/query 호출 → Recharts로 시각화
- Preference: derived_pegs CRUD(수식 유효성 단순 검증)

# Development Roadmap
## MVP
1) 백엔드: /api/analysis-result 수신/조회, /api/kpi/query(단순 프록시 또는 모의)
2) MCP: POST 대상 URL 환경변수/입력 파라미터로 주입 가능 + 기본값 /api/analysis-result
3) 프론트: apiClient 도입, SummaryReport/Statistics/Preference 화면 연동

## Enhancements
- 백엔드 영속 저장(PostgreSQL/SQLAlchemy) 및 스키마 정의
- 인증/권한, 구조적 로깅/메트릭, 마크다운 렌더러 도입
- DB 커넥션 풀링/재시도 및 보안 비밀관리

# Logical Dependency Chain
1) 백엔드 API 계약 확정 → 2) MCP POST 경로 연결 → 3) 프론트 apiClient/화면 연동 → 4) DB 프록시 고도화

# Risks and Mitigations
- 외부 DB 연결 실패: 타임아웃/재시도/명확한 에러 표기, 샘플 데이터 폴백
- LLM 응답 포맷 변동: 스키마 검증 및 폴백 렌더링
- 보안: CORS/인증 단계적 강화 및 비밀정보 외부화

# Appendix
- 데이터 스키마는 기존 문서(백엔드-프론트엔드 데이터 구조 양식.md) 준수 + analysis-result 스키마 추가
</PRD>


