# 프론트엔드 저장 기능 개선 및 사용자별 설정 관리 PRD

## 1. 프로젝트 개요

### 1.1 목적
KPI 대시보드 프론트엔드의 설정 저장 기능을 개선하여 모든 저장 버튼이 정상적으로 작동하고, 사용자별로 독립적인 설정을 관리할 수 있도록 합니다.

### 1.2 배경
- 대시보드 설정 저장 버튼이 동작하지 않음
- 데이터베이스 설정 저장 버튼이 동작하지 않음  
- Statistics 데이터 선택(host->ne->cellid) 저장은 정상 동작
- 현재 user는 default로 저장되고 있어 다중 사용자 환경에서 문제 발생
- 대시보드 설정의 표시할 peg 목록이 드롭다운 방식이 아님

### 1.3 목표
- **기능성**: 모든 저장 버튼이 정상적으로 작동하도록 수정
- **사용자 관리**: 사용자별 독립적인 설정 저장 및 로드 지원
- **UI/UX**: 대시보드 설정의 peg 목록을 드롭다운 방식으로 개선
- **데이터 일관성**: 웹페이지 재접속 시 DB에서 설정 정보 정상 로드

## 2. 기능 요구사항

### 2.1 저장 기능 문제 진단 및 해결

#### 2.1.1 대시보드 설정 저장 기능 수정
- 대시보드 설정 저장 버튼 클릭 시 API 호출 실패 문제 해결
- 저장 성공/실패 피드백 구현
- 설정 데이터 구조 불일치 문제 해결
- 대시보드 설정 저장 API 엔드포인트 구현/수정
- 저장 상태 표시 (로딩, 성공, 실패)
- 설정 데이터 검증 및 변환 로직
- 에러 처리 및 사용자 피드백

#### 2.1.2 데이터베이스 설정 저장 기능 수정
- 데이터베이스 설정 저장 버튼 클릭 시 동작하지 않는 문제 해결
- 설정 데이터 전송 실패 문제 해결
- 백엔드 API 응답 처리 오류 수정
- 데이터베이스 설정 저장 API 엔드포인트 구현/수정
- 설정 데이터 형식 검증
- 저장 성공/실패 상태 관리
- 설정 로드 시 초기값 설정

#### 2.1.3 Statistics 데이터 선택 저장 기능 유지
- host->ne->cellid 선택 저장이 정상 작동하는 기능 분석
- 이 기능의 구현 방식을 다른 저장 기능에 적용
- 기존 코드 패턴 분석 및 재사용

### 2.2 사용자별 설정 관리 시스템

#### 2.2.1 사용자 식별 시스템
- 세션 기반 사용자 ID 생성
- 로컬 스토리지에 사용자 ID 저장
- 사용자별 설정 데이터 분리
- 사용자 ID 형식: "user_${timestamp}_${randomString}"

#### 2.2.2 사용자별 설정 저장 구조
- 데이터베이스 스키마 확장
- 사용자별 독립적인 설정 저장
- 설정 충돌 방지
- 사용자별 데이터 격리
- 설정 공유 기능 (선택적)

### 2.3 UI/UX 개선

#### 2.3.1 대시보드 설정 드롭다운 구현
- 표시할 peg 목록을 기존 텍스트 입력 방식에서 드롭다운으로 변경
- 다중 선택 지원
- 검색 기능 포함
- 선택된 항목 표시

#### 2.3.2 저장 상태 표시 개선
- 로딩 상태 표시
- 성공/실패 메시지
- 저장 진행률 표시
- 자동 저장 기능 (선택적)

## 3. 기술 사양

### 3.1 프론트엔드 기술 스택
- React 18+
- useState, useEffect 훅 사용
- Context API 또는 Redux 상태 관리
- Axios 또는 Fetch API
- LocalStorage 세션 관리

### 3.2 백엔드 API 엔드포인트
- POST /api/user/settings/dashboard
- GET /api/user/settings/dashboard/{userId}
- POST /api/user/settings/database  
- GET /api/user/settings/database/{userId}
- POST /api/user/settings/statistics
- GET /api/user/settings/statistics/{userId}
- POST /api/user/create
- GET /api/user/{userId}/exists
- DELETE /api/user/{userId}/settings

### 3.3 데이터베이스 스키마
- 사용자 설정 테이블 (user_settings)
- 사용자 세션 테이블 (user_sessions)
- PostgreSQL 사용자 설정 테이블
- MongoDB 사용자 세션 컬렉션

## 4. 구현 계획

### Phase 1: 문제 진단 및 분석 (3일)
- 현재 저장 기능 코드 분석
- Statistics 저장 기능 정상 동작 원인 분석
- 대시보드/데이터베이스 설정 저장 실패 원인 파악
- API 엔드포인트 상태 확인
- 프론트엔드-백엔드 통신 로그 분석

### Phase 2: 사용자 관리 시스템 구현 (5일)
- 사용자 ID 생성 및 관리 로직 구현
- 사용자별 설정 저장/로드 API 구현
- 세션 관리 시스템 구현
- 다중 사용자 환경 테스트
- 사용자 설정 데이터베이스 스키마 구현

### Phase 3: 저장 기능 수정 (4일)
- 대시보드 설정 저장 기능 수정
- 데이터베이스 설정 저장 기능 수정
- 저장 상태 표시 UI 구현
- 에러 처리 및 사용자 피드백 개선
- 설정 데이터 검증 로직 구현

### Phase 4: UI/UX 개선 (3일)
- 대시보드 설정 드롭다운 구현
- PEG 목록 드롭다운 컴포넌트 개발
- 저장 버튼 상태 표시 개선
- 반응형 디자인 적용
- 접근성 개선

### Phase 5: 통합 테스트 및 최적화 (3일)
- End-to-End 테스트 시나리오 작성
- 다중 사용자 동시 접속 테스트
- 성능 최적화 및 메모리 누수 검사
- 보안 검토 및 취약점 수정
- 문서화 및 사용자 가이드 작성

## 5. 성공 지표

### 5.1 기능적 지표
- 저장 성공률: 모든 저장 버튼 100% 정상 동작
- 사용자 격리: 사용자별 설정 독립성 100% 보장
- 데이터 지속성: 웹페이지 재접속 시 설정 로드 성공률 100%
- API 응답 시간: 설정 저장/로드 < 2초
- 에러 처리: 저장 실패 시 명확한 에러 메시지 제공

### 5.2 사용자 경험 지표
- UI 응답성: 드롭다운 선택 응답 시간 < 500ms
- 직관성: 사용자가 설정 저장 상태를 명확히 인지
- 일관성: 모든 설정 페이지의 저장 방식 통일
- 접근성: 키보드 네비게이션 및 스크린 리더 지원

### 5.3 기술적 지표
- 코드 품질: 테스트 커버리지 80% 이상
- 성능: 메모리 사용량 증가 < 10%
- 보안: 사용자 데이터 격리 및 보안 검증 통과
- 확장성: 100명 이상 동시 사용자 지원

## 6. 리스크 및 완화 방안

### 6.1 기술적 리스크
- 기존 기능 영향: 수정 과정에서 기존 정상 동작 기능 손상
  - 완화: 단계적 배포, 롤백 계획, 철저한 테스트
- 데이터 마이그레이션: 기존 default 사용자 데이터 처리
  - 완화: 자동 마이그레이션 스크립트, 데이터 백업
- 성능 저하: 사용자별 설정 관리로 인한 성능 영향
  - 완화: 캐싱 전략, 데이터베이스 인덱스 최적화

### 6.2 사용자 경험 리스크
- 설정 손실: 사용자별 설정 전환 시 기존 설정 유실
  - 완화: 설정 백업 및 복구 기능, 사용자 알림
- UI 혼란: 새로운 드롭다운 방식에 대한 사용자 적응
  - 완화: 사용자 가이드, 도움말 툴팁, 점진적 UI 변경

## 7. 테스트 시나리오

### 7.1 저장 기능 테스트
- 대시보드 설정 저장 테스트
- 데이터베이스 설정 저장 테스트
- Statistics 설정 저장 테스트

### 7.2 다중 사용자 테스트
- 사용자별 설정 격리 테스트
- 동시 접속 사용자 처리 테스트
- 설정 충돌 방지 테스트

### 7.3 드롭다운 기능 테스트
- PEG 드롭다운 테스트
- 다중 선택 기능 테스트
- 검색 기능 테스트

## 8. 관련 파일

### 8.1 프론트엔드 파일
- kpi_dashboard/frontend/src/components/Dashboard.jsx
- kpi_dashboard/frontend/src/components/Preference.jsx
- kpi_dashboard/frontend/src/components/Statistics.jsx
- kpi_dashboard/frontend/src/contexts/PreferenceContext.jsx
- kpi_dashboard/frontend/src/hooks/usePreference.js

### 8.2 백엔드 파일
- kpi_dashboard/backend/app/routers/preference.py
- kpi_dashboard/backend/app/models/preference.py
- kpi_dashboard/backend/app/db.py
