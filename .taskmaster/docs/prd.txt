제목: 하드코딩 기반 입력 단순화 및 n/n-1 평균 비교 분석 기능 PRD

1. 배경 및 목적
- 현재 코드 사용 방식을 단순화한다.
- 실행 시 외부 설정 입력을 최소화하고, 코드 내부에 핵심 환경설정을 하드코딩한다.
- 사용자 입력은 오직 두 개의 값(n-1, n)만 받는다. 두 값은 일(day) 단위의 기준일로 간주한다.
- 목표는 기준일(n-1)과 대상일(n)에 대해 peg_name별 value의 평균을 산출하고, 평균값의 증감 및 변화율을 분석·보고하는 것이다.

2. 범위(Scope)
- 입력: n-1, n (형식: YYYY-MM-DD, 문자열)
- 하드코딩 항목: output_dir, backend_url, DB 접속 정보, 대상 table, 사용 columns
- 데이터 원천: RDB (스키마/테이블은 코드에 하드코딩)
- 처리 내용: 두 기준일에 대한 peg_name별 value 평균 비교, 증감 분석 결과 산출/저장
- 산출물: 결과 CSV 및 요약 리포트(예: HTML 또는 Markdown)

3. 시스템/설정(코드 하드코딩 항목)
- output_dir: 결과 파일 저장 경로
- backend_url: 백엔드 서비스 URL (필요 시; 현 단계에선 DB 직접 조회만 사용 가능)
- db: DB 접속 정보 (호스트, 포트, DB명, 계정, 비밀번호 등)
- table: 조회 대상 테이블명
- columns: 아래 스키마에 명시된 컬럼들

4. 데이터베이스 스키마 사양
- 테이블 컬럼 목록 및 자료형
  - id: integer
  - host: character varying
  - ne: character varying
  - version: character varying
  - family_name: character varying
  - cellid: character varying
  - peg_name: character varying
  - datetime: timestamp without time zone
  - value: double precision

5. 처리 로직(Functional Requirements)
- 입력 유효성 검증
  - n-1, n은 YYYY-MM-DD 형식의 문자열이어야 한다.
  - n은 n-1보다 같거나 이후여야 한다.
- 데이터 조회
  - 두 기준일 각각에 대해 DATE(datetime) = 기준일 조건으로 행을 조회한다.
  - 추가 필터(예: host, ne, family_name 등)는 현 버전에서 적용하지 않는다.
- 집계
  - 각 기준일 데이터에 대해 peg_name별 평균값(avg(value))을 산출한다.
  - 결과를 peg_name을 기준으로 조인하여 다음 지표를 계산한다.
    - avg_n_minus_1: 기준일(n-1)의 평균
    - avg_n: 대상일(n)의 평균
    - diff = avg_n - avg_n_minus_1
    - pct_change =
      - avg_n_minus_1가 0이 아니면 (diff / avg_n_minus_1) * 100
      - avg_n_minus_1가 0이면 분모 0 회피 로직 적용(예: null 또는 무한대로 표기)
- 출력
  - CSV: columns = [peg_name, avg_n_minus_1, avg_n, diff, pct_change]
  - 요약 리포트(HTML 또는 Markdown):
    - 전체 peg_name 개수, 평균 증감의 전반적 경향
    - 증감 상위/하위 peg_name (절대 diff 기준 상위 N, 변화율 기준 상위 N)
    - 임계값(예: |diff| >= T, |pct_change| >= P)을 넘는 항목 강조 (T, P는 코드에 하드코딩 가능)
- 성능/데이터량 가정
  - 하루 기준 데이터량에서 peg_name 그룹 수가 수천 단위까지 무리 없는 성능 목표

6. 인터페이스(입력/출력)
- 입력
  - CLI 인자 또는 함수 파라미터로 n_minus_1_date, n_date (YYYY-MM-DD)
  - 기타 설정/경로/DB정보는 전부 코드 내 상수로 하드코딩
- 출력
  - output_dir 아래 CSV 파일: 파일명 예) comparison_{n_minus_1}_{n}.csv
  - output_dir 아래 요약 리포트 파일: 파일명 예) report_{n_minus_1}_{n}.html (또는 .md)

7. 오류 처리 및 로깅(필수)
- 모든 주요 단계에서 INFO 레벨 로그 출력
  - 시작/종료, 입력 검증 결과, 쿼리 수행 시작/종료, 조회 건수, 집계 완료, 파일 저장 경로 등
- 예외 상황
  - 날짜 형식 오류: 사용자 친화적 메시지 + 종료
  - DB 연결/쿼리 실패: 오류 로그 + 종료
  - 데이터 없음: 경고 로그 + 빈 결과 처리(파일은 헤더만 저장 또는 결과 없음 리포트)
  - 분모 0: 변화율 계산 시 안전 처리 및 로그로 카운트 보고
- 로깅 포맷 예
  - "YYYY-MM-DD HH:MM:SS - LEVEL - [function] message"

8. 비기능 요구사항
- 재현성: 하드코딩 설정에 기반하여 언제 실행해도 동일한 결과(동일한 n, n-1 입력 시)
- 유지보수성: 설정 상수는 파일 상단에 모아두고, 명확한 변수명과 주석으로 관리
- 가독성: PEP 8 준수, 의미 있는 함수/변수명, 함수별 단일 책임 원칙 준수

9. 보안
- 비밀정보(계정/비번)는 안전한 방법으로 주입 가능하나, 본 PRD 범위에서는 하드코딩로 가정
  - 실제 운영 전환 시 환경변수/보안 저장소로 이전 권장

10. 완료 기준(Definition of Done)
- n-1, n 두 날짜 입력만으로 실행 가능
- DB에서 두 날짜 데이터를 조회해 peg_name별 평균 산출 후 비교/분석 결과를 CSV와 리포트로 저장
- 주요 단계 로그가 상세히 출력되고, 오류 상황에서 안전하게 종료
- 기본 단위 테스트(입력 검증, 집계 로직, 변화율 계산 분모 0 처리) 통과

11. 향후 확장(Out of Scope)
- 기간 범위(예: 일주일/월간) 비교
- 추가 필터(host/ne/family_name 등) 적용
- 시각화 대시보드 연동
- 경보/알림 시스템 연계


