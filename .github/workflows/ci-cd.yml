name: KPI Dashboard CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME_BACKEND: ${{ secrets.DOCKER_USERNAME }}/kpi-backend
  IMAGE_NAME_FRONTEND: ${{ secrets.DOCKER_USERNAME }}/kpi-frontend

# GitHub Secrets에 저장된 Docker Hub 정보
# Settings > Secrets and variables > Actions 에서 설정
# DOCKER_USERNAME: Docker Hub 사용자명
# DOCKER_PASSWORD: Docker Hub 비밀번호 또는 Access Token

jobs:
  # === 테스트 Job ===
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      mongo:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: kpi_dashboard/frontend/package-lock.json

    - name: Install Python dependencies
      working-directory: kpi_dashboard/backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx

    - name: Install Node.js dependencies
      working-directory: kpi_dashboard/frontend
      run: |
        npm ci

    - name: Run Python linting
      working-directory: kpi_dashboard/backend
      run: |
        python -m flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        python -m flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run Python tests
      working-directory: kpi_dashboard/backend
      env:
        MONGO_URL: mongodb://localhost:27017
        MONGO_DB_NAME: test_kpi
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: test_user
        DB_PASSWORD: test_password
        DB_NAME: test_db
        ENVIRONMENT: testing
      run: |
        python -m pytest app/tests/ -v --tb=short

    - name: Run Frontend linting
      working-directory: kpi_dashboard/frontend
      run: |
        npm run lint

    - name: Run Frontend tests
      working-directory: kpi_dashboard/frontend
      run: |
        npm run test:unit || echo "Frontend tests not implemented yet"

    - name: Build Frontend
      working-directory: kpi_dashboard/frontend
      env:
        VITE_API_BASE_URL: http://localhost:8000
      run: |
        npm run build

  # === 보안 스캔 Job ===
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # === Docker 빌드 & 푸시 Job ===
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata for Backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for Frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: ./kpi_dashboard/backend
        target: production
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./kpi_dashboard/frontend
        target: production
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        build-args: |
          VITE_API_BASE_URL=${{ vars.VITE_API_BASE_URL || 'https://api.example.com' }}

  # === 배포 Job (프로덕션) ===
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USER }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          cd /opt/kpi-dashboard
          
          # 환경 변수 설정
          export REGISTRY=${{ env.REGISTRY }}
          export BACKEND_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}
          export FRONTEND_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}
          
          # 새 이미지 pull
          docker pull $BACKEND_IMAGE
          docker pull $FRONTEND_IMAGE
          
          # 서비스 업데이트 (무중단 배포)
          docker compose -f docker-compose.prod.yml up -d --no-deps backend frontend
          
          # 헬스체크
          sleep 30
          curl -f http://localhost/health || exit 1
          
          # 이전 이미지 정리
          docker image prune -f

  # === 배포 Job (스테이징) ===
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /opt/kpi-dashboard-staging
          
          # 환경 변수 설정
          export REGISTRY=${{ env.REGISTRY }}
          export BACKEND_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:develop-${{ github.sha }}
          export FRONTEND_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:develop-${{ github.sha }}
          
          # 새 이미지 pull
          docker pull $BACKEND_IMAGE
          docker pull $FRONTEND_IMAGE
          
          # 서비스 업데이트
          docker compose -f docker-compose.staging.yml up -d --no-deps backend frontend
          
          # 헬스체크
          sleep 20
          curl -f http://localhost/health || exit 1

  # === 알림 Job ===
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.deploy-production.result == 'success' || needs.deploy-staging.result == 'success' }}
      run: |
        echo "Deployment successful!"
        # 여기에 Slack, Discord, Email 등의 알림 설정 추가 가능
        
    - name: Notify failure
      if: ${{ needs.deploy-production.result == 'failure' || needs.deploy-staging.result == 'failure' }}
      run: |
        echo "Deployment failed!"
        # 여기에 실패 알림 설정 추가 가능
