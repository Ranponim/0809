version: '3.8'

services:
  # Analysis LLM MCP Server
  analysis-llm-mcp:
    build:
      context: .
      dockerfile: Dockerfile.mcp
    container_name: analysis-llm-mcp
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - MCP_SERVER_NAME=analysis-llm
      # 데이터베이스 설정
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=kpi_db
      - DATABASE_USER=kpi_user
      - DATABASE_PASSWORD=kpi_password
      # LLM 설정
      - LLM_PROVIDER=gemini
      - LLM_MODEL=gemini-2.0-flash-exp
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      # API 설정
      - BACKEND_API_URL=http://backend:8000
      - API_TIMEOUT=30
      - API_RETRIES=3
    volumes:
      # 로그 파일 마운트 (선택사항)
      - ./logs:/app/logs
      # 설정 파일 마운트 (선택사항)
      - ./config:/app/config
    networks:
      - analysis-network
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "python", "-c", "from analysis_llm.service import get_service; import asyncio; asyncio.run(get_service().health_check())"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "service=analysis-llm-mcp"
      - "version=2.0.0"

  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15-alpine
    container_name: analysis-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=kpi_db
      - POSTGRES_USER=kpi_user
      - POSTGRES_PASSWORD=kpi_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - analysis-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kpi_user -d kpi_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 기존 MCPO 컨테이너 (수정된 버전)
  mcpo:
    image: your-existing-mcpo-image:latest
    container_name: analysis-mcpo
    restart: unless-stopped
    environment:
      - MCP_SERVER_URL=http://analysis-llm-mcp:8000
      - MCP_SERVER_NAME=analysis-llm
      - LOG_LEVEL=INFO
    ports:
      - "3000:3000"
    networks:
      - analysis-network
    depends_on:
      - analysis-llm-mcp
    volumes:
      # MCP 설정 파일 마운트
      - ./mcpo-config:/app/config
    labels:
      - "service=mcpo"
      - "version=2.0.0"

  # Redis (캐싱용, 선택사항)
  redis:
    image: redis:7-alpine
    container_name: analysis-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - analysis-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # 모니터링용 Grafana (선택사항)
  grafana:
    image: grafana/grafana:latest
    container_name: analysis-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - analysis-network
    depends_on:
      - prometheus

  # 모니터링용 Prometheus (선택사항)
  prometheus:
    image: prom/prometheus:latest
    container_name: analysis-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - analysis-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

networks:
  analysis-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local



